package com.medical.mypockethealth.Threads.UserSection.BookingSection;

import android.annotation.SuppressLint;
import android.app.Notification;
import android.content.Context;
import android.content.SharedPreferences;

import androidx.annotation.NonNull;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.gson.Gson;
import com.medical.mypockethealth.Classes.ClientInformation.ClientInformation;
import com.medical.mypockethealth.Classes.ClientInformation.PatientInformation;
import com.medical.mypockethealth.Classes.DoctorInformation.DoctorInformation;
import com.medical.mypockethealth.Classes.NotificationSection.ActivationStateInformation;
import com.medical.mypockethealth.Classes.NotificationSection.NotificationInformation;
import com.medical.mypockethealth.Classes.ResponseInformation;
import com.medical.mypockethealth.Classes.URLBuilder;
import com.medical.mypockethealth.ClientActivity.ClientMainFrame;
import com.medical.mypockethealth.ClientFragments.DoctorBookingSection.DoctorBookingConfirmFragment;

import org.json.JSONException;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;

public class BookDoctorCaller implements Runnable {

    private static final String TAG = "BookDoctorCaller";

    private final DoctorInformation doctorInformation;
    private final CallbackFromBookDoctorCaller callbackFromBookDoctorCaller;
    private final Context context;

    public BookDoctorCaller(DoctorInformation doctorInformation, CallbackFromBookDoctorCaller callbackFromBookDoctorCaller, Context context) {
        this.doctorInformation = doctorInformation;
        this.callbackFromBookDoctorCaller = callbackFromBookDoctorCaller;
        this.context = context;
    }

    public interface CallbackFromBookDoctorCaller
    {

        void confirmation(ResponseInformation responseInformation);

    }

    @Override
    public void run() {

        @SuppressLint("SimpleDateFormat") SimpleDateFormat formatter = new SimpleDateFormat("yy-MM-dd HH:mm");
        Date date = new Date();
        System.out.println(formatter.format(date));

        String userMessage="Booked appointment with Dr. "+doctorInformation.getFirstName().charAt(0)+" "+doctorInformation.getSurName()+" on "+formatter.format(date) +"\n"+"Date : "+doctorInformation.getSelected_date()+"\nSlot Time : "+doctorInformation.getSlotTime();
        String providerMessage="Appointment request generated by "+getUserName()+" on "+formatter.format(date)+"\n"+"Date : "+doctorInformation.getSelected_date()+"\n"+"Slot Time : "+doctorInformation.getSlotTime();


        setUpNotification(userMessage,providerMessage);

        try {

            HttpURLConnection httpURLConnection=(HttpURLConnection)new
                    URL(URLBuilder.base_url+URLBuilder.UrlMethods.bookMySlot).openConnection();


            httpURLConnection.setRequestMethod(URLBuilder.Request.POST.toString());

            httpURLConnection.setDoOutput(true);

            httpURLConnection.setDoInput(true);

            String data= URLEncoder.encode(URLBuilder.Parameter.providerId.toString(),"UTF-8")+"="+URLEncoder.encode(doctorInformation.getId(),"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.userId.toString(),"UTF-8")+"="+URLEncoder.encode(ClientMainFrame.id,"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.date.toString(),"UTF-8")+"="+URLEncoder.encode(doctorInformation.getSelected_date(),"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.slotTime.toString(),"UTF-8")+"="+URLEncoder.encode(doctorInformation.getSlotTime(),"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.patientName.toString(),"UTF-8")+"="+URLEncoder.encode(doctorInformation.getPatientName(),"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.patientAge.toString(),"UTF-8")+"="+URLEncoder.encode(doctorInformation.getPatientAge(),"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.ehrStatus.toString(),"UTF-8")+"="+URLEncoder.encode(doctorInformation.getEhrStatus(),"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.title.toString(),"UTF-8")+"="+URLEncoder.encode(URLBuilder.Title.Booking,"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.type.toString(),"UTF-8")+"="+URLEncoder.encode(URLBuilder.Type.BookingRequest.toString(),"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.userMessage.toString(),"UTF-8")+"="+URLEncoder.encode(userMessage,"UTF-8")
                    +"&"+URLEncoder.encode(URLBuilder.Parameter.providerMessage.toString(),"UTF-8")+"="+URLEncoder.encode(providerMessage,"UTF-8");


            OutputStream outputStream=httpURLConnection.getOutputStream();
            BufferedWriter bufferedWriter=new BufferedWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));

            bufferedWriter.write(data);

            bufferedWriter.flush();

            bufferedWriter.close();

            outputStream.close();

            InputStream inputStream=httpURLConnection.getInputStream();

            BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));

            StringBuilder stringBuffer=new StringBuilder();

            for (String v=bufferedReader.readLine();v!=null;v=bufferedReader.readLine())
            {
                stringBuffer.append(v);

            }


            bufferedReader.close();

            inputStream.close();

            jsonParser(stringBuffer.toString());


        } catch (Exception e) {

            if(callbackFromBookDoctorCaller!=null)
            {

                ResponseInformation responseInformation=new ResponseInformation();
                responseInformation.setSuccess(String.valueOf(ResponseInformation.fail_response_type));
                responseInformation.setMessage("We are having technical issue. Please try again later");
                callbackFromBookDoctorCaller.confirmation(responseInformation);
            }

        }

    }

    private void setUpNotification(String userMessage,String providerMessage)
    {

        DatabaseReference databaseReference= FirebaseDatabase.getInstance().getReference(URLBuilder.FirebaseDataNodes.Notification);

        String random_key_generator=databaseReference.push().getKey();

        NotificationInformation notificationInformation=new
                NotificationInformation(URLBuilder.Type.BookingRequest.toString(),URLBuilder.Title.Booking,userMessage,random_key_generator);

        assert random_key_generator != null;

        databaseReference.child(ClientMainFrame.id).child(URLBuilder.FirebaseDataNodes.myNotification).child(random_key_generator).setValue(notificationInformation).addOnCompleteListener(new OnCompleteListener<Void>() {
            @Override
            public void onComplete(@NonNull Task<Void> task) {


                String random_key_generator=databaseReference.push().getKey();

                NotificationInformation notificationInformation=new
                        NotificationInformation(URLBuilder.Type.BookingRequest.toString(),URLBuilder.Title.Booking,providerMessage,random_key_generator);


                assert random_key_generator != null;
                databaseReference.child(doctorInformation.getId()).child(URLBuilder.FirebaseDataNodes.myNotification).child(random_key_generator).
                        setValue(notificationInformation).addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {


                        setNotification();

                    }
                });



            }
        });


    }

    private void setNotification()
    {
        DatabaseReference databaseReference= FirebaseDatabase.getInstance().getReference(URLBuilder.FirebaseDataNodes.Notification);

        databaseReference.child(ClientMainFrame.id).child(URLBuilder
                .FirebaseDataNodes.activationStatus).removeValue().addOnCompleteListener(new OnCompleteListener<Void>() {
            @Override
            public void onComplete(@NonNull Task<Void> task) {


                databaseReference.child(doctorInformation.getId()).child(URLBuilder
                        .FirebaseDataNodes.activationStatus).removeValue().addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {



                        String random_key_generator=databaseReference.push().getKey();

                        ActivationStateInformation activationStateInformation=new ActivationStateInformation("0",random_key_generator);

                        assert random_key_generator != null;
                        databaseReference.child(ClientMainFrame.id).child(URLBuilder.FirebaseDataNodes.activationStatus)
                                .child(random_key_generator).setValue(activationStateInformation).addOnCompleteListener(new OnCompleteListener<Void>() {
                            @Override
                            public void onComplete(@NonNull Task<Void> task) {


                                String random_key_generator=databaseReference.push().getKey();

                                assert random_key_generator != null;
                                databaseReference.child(doctorInformation.getId()).child(URLBuilder.FirebaseDataNodes.activationStatus)
                                        .child(random_key_generator).setValue(activationStateInformation).addOnCompleteListener(new OnCompleteListener<Void>() {
                                    @Override
                                    public void onComplete(@NonNull Task<Void> task) {



                                    }
                                });



                            }
                        });

                    }
                });


            }
        });



    }

    private String getUserName()
    {

        SharedPreferences preferences= context.getSharedPreferences(ClientMainFrame.client_information_file, Context.MODE_PRIVATE);
        String json = preferences.getString(ClientMainFrame.client_information_key, "");
        Gson gson = new Gson();
        ClientInformation clientInformation = gson.fromJson(json, ClientInformation.class);

        return clientInformation.getFirstName()+" "+clientInformation.getSurName();
    }

    private void jsonParser(String value) throws JSONException {

        Gson gson = new Gson();
        ResponseInformation responseInformation = gson.fromJson(value, ResponseInformation.class);

        if(callbackFromBookDoctorCaller!=null)
        {
            callbackFromBookDoctorCaller.confirmation(responseInformation);
        }

    }

}